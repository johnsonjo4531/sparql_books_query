{"mappings":";;AAAA;AACA,MAAM,yBAAG,GAAG,IAAI,GAAG,CAAC,CAAC,0BAA0B,CAAC,CAAC,AAAC;AAClD,yBAAG,CAAC,MAAM,GAAG,IAAI,eAAe,CAAC;IAC/B,KAAK,EAAE,MAAM,CAAA,GAAA,qBAAE,CAAA,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,EAAE,MAAM,CAAC;CACnD,CAAC,CAAC,QAAQ,EAAE,CAAC;AACd,MAAM,KAAK,CAAC,yBAAG,EAAE;IACf,OAAO,EAAE;QACP,MAAM,EAAE,iCAAiC;KAC1C;CACF,CAAC,CACC,IAAI,CAAC,CAAC,CAAC,GAAK;IACX,IAAI,CAAC,CAAC,EAAE,EACN,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAElB,MAAM,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;CACjD,CAAC,CACD,IAAI,CAAC,CAAC,CAAC,GAAK;IACX,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;CACjD,CAAC,CAAC","sources":["script.ts"],"sourcesContent":["import fs from \"node:fs/promises\";\nconst url = new URL(`https://dbpedia.org/sparql`);\nurl.search = new URLSearchParams({\n  query: await fs.readFile(`./query.sparql`, \"utf8\"),\n}).toString();\nawait fetch(url, {\n  headers: {\n    Accept: \"application/sparql-results+json\",\n  },\n})\n  .then((x) => {\n    if (x.ok) {\n      return x.json();\n    }\n    throw new Error(`${x.status}: ${x.statusText}`);\n  })\n  .then((x) => {\n    console.log(JSON.stringify(x.results, null, 2));\n  });\n"],"names":[],"version":3,"file":"main.js.map"}